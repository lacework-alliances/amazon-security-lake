AWSTemplateFormatVersion: 2010-09-09
Description: "Lacework AWS Moose Integration: Add the Lacework Cloud Security Platform for cloud-native threat detection, compliance, behavioral anomaly detection, and automated AWS security monitoring."
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - MooseS3BucketName
          - LaceworkURL
          - LaceworkSubAccountName
          - LaceworkAccessKeyID
          - LaceworkSecretKey
          - ResourcePrefixName
    ParameterLabels:
      MooseS3BucketName:
        default: Moose S3 Bucket Name
      LaceworkURL:
        default: Your Lacework URL
      LaceworkSubAccountName:
        default: Lacework Sub-Account Name
      LaceworkAccessKeyID:
        default: Lacework Access Key ID
      LaceworkSecretKey:
        default: Lacework Secret Key
      ResourcePrefixName:
        default: Resource Prefix Name
Parameters:
  # basic
  MooseS3BucketName:
    Type: String
    Default: moose
    Description: "Moose S3 bucket to use."
    MinLength: '1'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_-]*'
    ConstraintDescription: "Invalid S3 bucket name."
  LaceworkURL:
    Type: String
    Description: "Enter your Lacework URL. ie. account.lacework.net."
    MinLength: '1'
    AllowedPattern: '(.+?)\.lacework\.net'
    ConstraintDescription: "Invalid Lacework URL."
  LaceworkSubAccountName:
    Type: String
    Description: "If Lacework Organizations is enabled, enter the sub-account. Leave blank if Lacework Organizations is not enabled."
    AllowedPattern: '^$|^[a-zA-Z0-9.]+(?:-[a-zA-Z0-9.]+)*$'
    ConstraintDescription: "Invalid Lacework account name entered. The account name may contain alphanumeric characters and dashes only."
  LaceworkAccessKeyID:
    Type: String
    MinLength: '1'
    AllowedPattern: '^[-a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Access Key ID contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key ID. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  LaceworkSecretKey:
    Type: String
    NoEcho: true
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Secret Key contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  ResourcePrefixName:
    Type: String
    Description: "Specify the prefix to use for all resources that are created: EventBridge event bus, event rule, SQS queue, alert channel and rule."
    AllowedPattern: '^[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*$'
    ConstraintDescription: "Resource prefix name may contain alphanumeric characters and dashes only."
    Default: "Lacework-Moose"
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: 'lacework-alliances'
      Prefix: 'lacework-moose'
      Objects:
        - '/lambda/moose.zip'

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::lacework-alliances/lacework-moose*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/lacework-moose*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  LaceworkMooseSetupFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', ['lacework-moose', '/lambda/moose.zip']]
      Handler: setup
      Runtime: go1.x
      Environment:
        Variables:
          lacework_url: !Ref LaceworkURL
          lacework_sub_account_name: !Ref LaceworkSubAccountName
          lacework_access_key_id: !Ref LaceworkAccessKeyID
          lacework_secret_key: !Ref LaceworkSecretKey
          event_bus_arn: !GetAtt LaceworkMooseEventBus.Arn
          alert_channel_name: !Join [ "-", ["Lacework-Moose", !Select [2, !Split [ "/", !Ref 'AWS::StackId']]]]
      Role: !GetAtt LaceworkMooseSetupFunctionRole.Arn

  LaceworkMooseSetupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LaceworkMooseSetup: # this will launch the setup function
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        !GetAtt LaceworkMooseSetupFunction.Arn

  LaceworkMooseEventFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AWS_Moose_Operations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: MooseReadBucket
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !Sub 'arn:aws:s3:::${MooseS3BucketName}'
              - Sid: MooseWrite
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${MooseS3BucketName}/*'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole'

  LaceworkMooseEventFunction:
    Type: AWS::Lambda::Function
    DependsOn:
    - CopyZips
    - LaceworkMooseQueue
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', ['lacework-moose', '/lambda/moose.zip']]
      Handler: main
      MemorySize: 256
      Timeout: 30
      Runtime: go1.x
      Environment:
        Variables:
          lacework_url: !Ref LaceworkURL
          moose_s3_bucket_name: !Ref MooseS3BucketName
      Role: !GetAtt LaceworkMooseEventFunctionRole.Arn

  LaceworkMooseEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Join ['', [!Ref ResourcePrefixName, '-Event-Bus']]

  LaceworkMooseEventBusPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref LaceworkMooseEventBus
      StatementId: "LaceworkMooseEventBusStatement"
      Statement:
        Effect: "Allow"
        Principal:
          AWS: "arn:aws:iam::434813966438:root"
        Action: "events:PutEvents"
        Resource: !GetAtt LaceworkMooseEventBus.Arn

  LaceworkMooseEvents:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: "Captures Lacework Security Events"
      EventBusName: !GetAtt LaceworkMooseEventBus.Name
      EventPattern:
        account: ["434813966438"]
      Name: !Join ['', [!Ref ResourcePrefixName, '-Event-Rule']]
      State: ENABLED
      Targets:
        - Arn: !GetAtt LaceworkMooseQueue.Arn
          Id: lacework-moose-event-to-sqs-queue

  EventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: SQS:SendMessage
            Resource:  !GetAtt LaceworkMooseQueue.Arn
      Queues:
        - !Ref LaceworkMooseQueue

  LaceworkMooseQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Join ['', [!Ref ResourcePrefixName, '-Event-Queue']]
      DelaySeconds: 0
      MessageRetentionPeriod: 86400

  LaceworkMooseEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt LaceworkMooseQueue.Arn
      FunctionName: !GetAtt LaceworkMooseEventFunction.Arn