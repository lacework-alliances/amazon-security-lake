AWSTemplateFormatVersion: 2010-09-09
Description: "Lacework Amazon Security Lake Integration v1.2.0GA: Add the Lacework Cloud Security Platform for cloud-native threat detection, compliance, behavioral anomaly detection, and automated AWS security monitoring."
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - AmazonSecurityLakeS3Location
          - AmazonSecurityLakeRoleArn
          - AmazonSecurityLakeRoleExternalID
          - LaceworkURL
          - LaceworkSubAccountName
          - LaceworkAccessKeyID
          - LaceworkSecretKey
          - ResourcePrefixName
    ParameterLabels:
      AmazonSecurityLakeS3Location:
        default: Amazon Security Lake S3 Location
      AmazonSecurityLakeRoleArn:
        default: Amazon Security Lake Role ARN
      AmazonSecurityLakeRoleExternalID:
        default: Amazon Security Lake Role External ID
      LaceworkURL:
        default: Your Lacework URL
      LaceworkSubAccountName:
        default: Lacework Sub-Account Name (Optional)
      LaceworkAccessKeyID:
        default: Lacework Access Key ID
      LaceworkSecretKey:
        default: Lacework Secret Key
      ResourcePrefixName:
        default: Resource Prefix Name
Parameters:
  # basic
  AmazonSecurityLakeS3Location:
    Type: String
    Default: aws-security-lake-region-xxxx/ext/lacework
    Description: "Amazon Security Lake S3 location to use. This S3 location is provided when you create the Lacework Custom Source in the Amazon Security Lake console. ie. aws-security-lake-region-xxxx/ext/lacework."
    MinLength: "1"
    AllowedPattern: '([a-zA-Z0-9-_\/]+)+'
    ConstraintDescription: "Invalid S3 location."
  AmazonSecurityLakeRoleArn:
    Type: String
    Default: arn:aws:iam::123456789123:role/AmazonSecurityLake-Provider-lacework-region
    Description: "Amazon Security Lake role to assume when writing to the Amazon Security Lake S3 location. This IAM role is created when you create the Lacework Custom Source in the Amazon Security Lake console. ie. arn:aws:iam::123456789123:role/AmazonSecurityLake-Provider-lacework-us-west-2."
    MinLength: "1"
    AllowedPattern: '^arn:aws:iam::\d{12}:role/.+'
    ConstraintDescription: "Invalid role."
  AmazonSecurityLakeRoleExternalID:
    Description: External ID for assuming the AmazonSecurityLakeRole
    Type: String
    MinLength: 1
    MaxLength: 256
    AllowedPattern: '^[a-zA-Z0-9-_:]*$'
    ConstraintDescription: "External ID must be alphanumeric and can include hyphens."
  LaceworkURL:
    Type: String
    Description: "Enter your Lacework URL. ie. account.lacework.net."
    MinLength: "1"
    AllowedPattern: '(.+?)\.lacework\.net'
    ConstraintDescription: "Invalid Lacework URL."
  LaceworkSubAccountName:
    Type: String
    Description: "If Lacework Organizations is enabled, enter the sub-account. Leave blank if Lacework Organizations is not enabled."
    AllowedPattern: '^$|^[a-zA-Z0-9.]+(?:-[a-zA-Z0-9.]+)*$'
    ConstraintDescription: "Invalid Lacework account name entered. The account name may contain alphanumeric characters and dashes only."
  LaceworkAccessKeyID:
    Type: String
    MinLength: "1"
    AllowedPattern: '^[-a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Access Key ID contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key ID. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  LaceworkSecretKey:
    Type: String
    NoEcho: true
    MinLength: "1"
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Secret Key contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  ResourcePrefixName:
    Type: String
    Description: "Specify the prefix to use for all resources that are created: EventBridge event bus, event rule, SQS queue, alert channel and rule."
    AllowedPattern: '^[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*$'
    ConstraintDescription: "Resource prefix name may contain alphanumeric characters and dashes only."
    Default: "Lacework-AmazonSecurityLake"
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  AmazonSecurityLakeCacheS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "amazon-security-lake-cache-${AWS::AccountId}-${AWS::Region}"

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt "CopyZipsFunction.Arn"
      DestBucket: !Ref "LambdaZipsBucket"
      SourceBucket: "lacework-alliances"
      Prefix: "lacework-amazon-security-lake-dev"
      Objects:
        - "/lambda/amazon-security-lake.zip"

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::lacework-alliances/lacework-amazon-security-lake*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/lacework-amazon-security-lake*"

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt "CopyZipsRole.Arn"
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client("s3")
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      "Bucket": source_bucket,
                      "Key": key
                  }
                  print("copy_source: %s" % copy_source)
                  print("dest_bucket = %s"%dest_bucket)
                  print("key = %s" %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client("s3")
              objects = {"Objects": [{"Key": prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error("Execution is about to time out, sending failure response to CloudFormation")
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print("Received event: %s" % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event["ResourceProperties"]["SourceBucket"]
                  dest_bucket = event["ResourceProperties"]["DestBucket"]
                  prefix = event["ResourceProperties"]["Prefix"]
                  objects = event["ResourceProperties"]["Objects"]
                  if event["RequestType"] == "Delete":
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error("Exception: %s" % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  LaceworkAmazonSecurityLakeSetupFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - CopyZips
      - LaceworkAmazonSecurityLakeEventBus
      - LaceworkAmazonSecurityLakeEventBusPolicy
      - LaceworkAmazonSecurityLakeQueue
      - LaceworkAmazonSecurityLakeEventFunction
      - LaceworkAmazonSecurityLakeEventsRule
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ["", ["lacework-amazon-security-lake-dev", "/lambda/amazon-security-lake.zip"]]
      Handler: bootstrap
      Runtime: provided.al2023
      Environment:
        Variables:
          MODE: setup
          lacework_url: !Ref LaceworkURL
          lacework_sub_account_name: !Ref LaceworkSubAccountName
          lacework_access_key_id: !Ref LaceworkAccessKeyID
          lacework_secret_key: !Ref LaceworkSecretKey
          event_bus_arn: !GetAtt LaceworkAmazonSecurityLakeEventBus.Arn
          alert_channel_name: !Join [ "-", ["Lacework-Amazon-Security-Lake-dev", !Select [2, !Split [ "/", !Ref "AWS::StackId"]]]]
          amazon_security_lake_cache_s3_bucket_name: !Ref AmazonSecurityLakeCacheS3Bucket
      Role: !GetAtt LaceworkAmazonSecurityLakeSetupFunctionRole.Arn

  LaceworkAmazonSecurityLakeSetupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: SecurityLakeCacheOperations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AmazonSecurityLakeCacheListAllObjects
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${AmazonSecurityLakeCacheS3Bucket}'
              - Sid: AmazonSecurityLakeCacheAllObjectActions
                Effect: Allow
                Action:
                  - s3:*Object
                Resource:
                  - !Sub 'arn:aws:s3:::${AmazonSecurityLakeCacheS3Bucket}/*'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  LaceworkAmazonSecurityLakeSetup: # this will launch the setup function
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LaceworkAmazonSecurityLakeSetupFunction.Arn

  LaceworkAmazonSecurityLakeEventFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AssumeSecurityLakeOperations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Sid: AssumeSecurityLakeRole
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource:
                !Ref AmazonSecurityLakeRoleArn
            - Sid: AmazonSecurityLakeCacheListAllObjects
              Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                - !Sub 'arn:aws:s3:::${AmazonSecurityLakeCacheS3Bucket}'
            - Sid: AmazonSecurityLakeCacheAllObjectActions
              Effect: Allow
              Action:
                - s3:*Object
              Resource:
                - !Sub 'arn:aws:s3:::${AmazonSecurityLakeCacheS3Bucket}/*'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"

  LaceworkAmazonSecurityLakeEventFunction:
    Type: AWS::Lambda::Function
    DependsOn:
    - CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ["", ["lacework-amazon-security-lake-dev", "/lambda/amazon-security-lake.zip"]]
      Handler: bootstrap
      MemorySize: 256
      Timeout: 30
      Runtime: provided.al2023
      Environment:
        Variables:
          MODE: main
          lacework_url: !Ref LaceworkURL
          amazon_security_lake_s3_location: !Ref AmazonSecurityLakeS3Location
          amazon_security_lake_cache_s3_bucket_name: !Ref AmazonSecurityLakeCacheS3Bucket
          amazon_security_lake_role_arn: !Ref AmazonSecurityLakeRoleArn
          amazon_security_lake_role_eid: !Ref AmazonSecurityLakeRoleExternalID
      Role: !GetAtt LaceworkAmazonSecurityLakeEventFunctionRole.Arn

  LaceworkAmazonSecurityLakeEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Join ["", [!Ref ResourcePrefixName, "-Event-Bus"]]

  LaceworkAmazonSecurityLakeEventBusPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref LaceworkAmazonSecurityLakeEventBus
      StatementId: "LaceworkAmazonSecurityLakeEventBusStatement"
      Statement:
        Effect: "Allow"
        Principal:
          AWS: "arn:aws:iam::434813966438:root"
        Action: "events:PutEvents"
        Resource: !GetAtt LaceworkAmazonSecurityLakeEventBus.Arn

  LaceworkAmazonSecurityLakeEventsRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Captures Lacework Security Events"
      EventBusName: !GetAtt LaceworkAmazonSecurityLakeEventBus.Name
      EventPattern:
        account: ["434813966438"]
      Name: !Join ["", [!Ref ResourcePrefixName, "-Event-Rule"]]
      State: ENABLED
      Targets:
        - Arn: !GetAtt LaceworkAmazonSecurityLakeQueue.Arn
          Id: lacework-amazon-security-lake-event-to-sqs-queue

  EventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: SQS:SendMessage
            Resource:  !GetAtt LaceworkAmazonSecurityLakeQueue.Arn
      Queues:
        - !Ref LaceworkAmazonSecurityLakeQueue

  LaceworkAmazonSecurityLakeQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Join ["", [!Ref ResourcePrefixName, "-Event-Queue"]]
      DelaySeconds: 0
      MessageRetentionPeriod: 86400

  LaceworkAmazonSecurityLakeEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt LaceworkAmazonSecurityLakeQueue.Arn
      FunctionName: !GetAtt LaceworkAmazonSecurityLakeEventFunction.Arn
